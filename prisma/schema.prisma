// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserRole {
  ADMIN
  PARTNER_ADMIN
  PARTNER_USER
  PROMOTER
  PARTNER_PROMOTER
  CUSTOMER
}

enum DocumentType {
  CPF
  CNPJ
}

enum ProductCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
}

enum ProductStatus {
  AVAILABLE
  SOLD
  RESERVED
  INACTIVE
}

enum PromoterTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum InvitationStatus {
  PENDING
  SENT
  VIEWED
  ACCEPTED
  DECLINED
  EXPIRED
}

enum InvitationType {
  DIRECT
  BULK
  PUBLIC
  CAMPAIGN
}

enum EventType {
  FLASH_SALE
  SHOWCASE
  SPOTLIGHT
  SEASONAL
  REGIONAL
}

enum EventStatus {
  DRAFT
  ACTIVE
  ENDED
  CANCELLED
}

enum ParticipationStatus {
  INVITED
  ACCEPTED
  DECLINED
  PARTICIPATED
  NO_SHOW
}

enum CommissionType {
  INVITATION_BONUS
  ONGOING_SALES
  EVENT_BONUS
  TIER_BONUS
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  DISPUTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  CASH
}

// Models
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  name       String
  role       UserRole @default(CUSTOMER)
  isActive   Boolean  @default(true)
  
  // Email verification fields
  emailVerified      Boolean  @default(false)
  emailVerifyToken   String?  @unique
  emailVerifyExpires DateTime?
  
  partnerId  String?
  partner    Partner? @relation(fields: [partnerId], references: [id])
  
  promoter   Promoter?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([email])
  @@index([partnerId])
  @@index([emailVerifyToken])
}

model Partner {
  id               String       @id @default(cuid())
  name             String
  email            String       @unique
  phone            String
  document         String       @unique
  documentType     DocumentType
  description      String?
  logo             String?
  isActive         Boolean      @default(true)
  hasPhysicalStore Boolean      @default(true)
  
  // Public storefront fields
  slug              String?  @unique
  publicDescription String?
  isPublicActive    Boolean  @default(true)
  publicBanner      String?
  publicLogo        String?
  whatsappNumber    String?
  publicEmail       String?
  businessHours     Json?
  socialLinks       Json?
  
  address      Address?
  users        User[]
  products     Product[]
  orders       Order[]
  
  // AI Enhancement relations
  aiEnhancementUsage AIEnhancementUsage[]
  
  // PROMOTER system relations
  invitedBy          PartnerInvitation? @relation("InvitedPartner")
  eventParticipations EventParticipant[]
  commissions        PromoterCommission[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([email])
  @@index([document])
  @@index([slug])
}

model Address {
  id           String  @id @default(cuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  
  partnerId    String  @unique
  partner      Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([partnerId])
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String?
  price       Decimal          @db.Decimal(10, 2)
  sku         String?
  category    String
  brand       String?
  size        String?
  color       String?
  condition   ProductCondition
  status      ProductStatus    @default(AVAILABLE)
  
  // Public storefront fields
  slug            String?
  isPublicVisible Boolean @default(true)
  viewCount       Int     @default(0)
  publicTags      String[]
  
  partnerId   String
  partner     Partner          @relation(fields: [partnerId], references: [id])
  
  images      ProductImage[]
  orderItems  OrderItem[]
  wishlist    Wishlist[]
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@unique([partnerId, sku])
  @@unique([partnerId, slug])
  @@index([partnerId])
  @@index([status])
  @@index([category])
  @@index([isPublicVisible])
  @@index([viewCount])
}

model ProductImage {
  id           String   @id @default(cuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  originalUrl  String   // Imagem original
  processedUrl String   // Imagem processada (crop/resize)
  thumbnailUrl String   // Thumbnail para listagens
  order        Int      @default(0)
  metadata     Json?    // Dimens√µes, tamanho, etc.
  
  // AI Enhancement fields
  aiEnhanced           Boolean @default(false)
  enhancementProvider  String?
  enhancementVersion   String?
  qualityScore         Decimal? @db.Decimal(3, 2)
  processingCost       Decimal? @db.Decimal(8, 4)
  enhancementRequestId String?
  enhancedUrl          String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  
  @@index([productId])
  @@index([order])
  @@index([aiEnhanced])
  @@index([enhancementProvider])
}

model AIEnhancementUsage {
  id                String   @id @default(cuid())
  partnerId         String
  partner           Partner  @relation(fields: [partnerId], references: [id])
  provider          String
  enhancementType   String
  imagesProcessed   Int
  totalCost         Decimal  @db.Decimal(10, 4)
  requestId         String?
  batchId           String?
  metadata          Json?    // Processing details, quality scores, etc.
  createdAt         DateTime @default(now())
  
  @@index([partnerId])
  @@index([provider])
  @@index([enhancementType])
  @@index([createdAt])
  @@index([batchId])
}

// PROMOTER System Models
model Promoter {
  id                      String        @id @default(cuid())
  userId                  String        @unique
  user                    User          @relation(fields: [userId], references: [id])
  businessName            String
  commissionRate          Decimal       @default(0.0200) @db.Decimal(5, 4)
  tier                    PromoterTier  @default(BRONZE)
  invitationQuota         Int           @default(10)
  invitationsUsed         Int           @default(0)
  totalCommissionsEarned  Decimal       @default(0.00) @db.Decimal(12, 2)
  totalPartnersInvited    Int           @default(0)
  successfulInvitations   Int           @default(0)
  isActive                Boolean       @default(true)
  approvedAt              DateTime?
  territory               String?
  specialization          String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  
  // Relations
  invitations             PartnerInvitation[]
  events                  Event[]
  eventParticipants       EventParticipant[]
  commissions             PromoterCommission[]
  
  // Market Intelligence relations
  brechoSearchResults     BrechoSearchResult[]
  brechoMapViews          BrechoMapView[]
  brechoExportRequests    BrechoExportRequest[]
  
  @@index([userId])
  @@index([tier])
  @@index([territory])
  @@index([isActive])
}

model PartnerInvitation {
  id                    String           @id @default(cuid())
  promoterId            String
  promoter              Promoter         @relation(fields: [promoterId], references: [id])
  invitationCode        String           @unique
  targetEmail           String
  targetPhone           String?
  targetName            String?
  targetBusinessName    String?
  status                InvitationStatus @default(PENDING)
  personalizedMessage   String?
  invitationType        InvitationType   @default(DIRECT)
  expiresAt             DateTime
  sentAt                DateTime?
  viewedAt              DateTime?
  acceptedAt            DateTime?
  declinedAt            DateTime?
  resultingPartnerId    String?          @unique
  resultingPartner      Partner?         @relation("InvitedPartner", fields: [resultingPartnerId], references: [id])
  commissionAmount      Decimal?         @db.Decimal(10, 2)
  commissionPercentage  Decimal?         @db.Decimal(5, 4)
  metadata              Json?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  
  @@index([promoterId])
  @@index([invitationCode])
  @@index([status])
  @@index([targetEmail])
  @@index([expiresAt])
}

model Event {
  id                        String              @id @default(cuid())
  promoterId                String
  promoter                  Promoter            @relation(fields: [promoterId], references: [id])
  name                      String
  description               String?
  bannerImage               String?
  eventType                 EventType
  startDate                 DateTime
  endDate                   DateTime
  timezone                  String              @default("America/Sao_Paulo")
  isPublic                  Boolean             @default(true)
  isFeatured                Boolean             @default(false)
  targetCategories          String[]
  targetRegions             String[]
  discountPercentage        Decimal?            @db.Decimal(5, 2)
  minDiscountPercentage     Decimal?            @db.Decimal(5, 2)
  maxParticipants           Int?
  participationFee          Decimal             @default(0.00) @db.Decimal(10, 2)
  commissionBonus           Decimal             @default(0.0000) @db.Decimal(5, 4)
  participationRequirements Json?
  status                    EventStatus         @default(DRAFT)
  landingPageUrl            String?
  socialHashtag             String?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  
  // Relations
  participants              EventParticipant[]
  
  @@index([promoterId])
  @@index([status])
  @@index([eventType])
  @@index([startDate, endDate])
  @@index([isPublic])
  @@index([isFeatured])
}

model EventParticipant {
  id                    String              @id @default(cuid())
  eventId               String
  event                 Event               @relation(fields: [eventId], references: [id])
  partnerId             String
  partner               Partner             @relation(fields: [partnerId], references: [id])
  invitedByPromoterId   String
  invitedByPromoter     Promoter            @relation(fields: [invitedByPromoterId], references: [id])
  invitationSentAt      DateTime?
  respondedAt           DateTime?
  participationStatus   ParticipationStatus @default(INVITED)
  productsSubmitted     Int                 @default(0)
  salesDuringEvent      Decimal             @default(0.00) @db.Decimal(12, 2)
  ordersDuringEvent     Int                 @default(0)
  commissionEarned      Decimal             @default(0.00) @db.Decimal(10, 2)
  performanceRating     Decimal?            @db.Decimal(3, 2)
  feedback              String?
  participationFeePaid  Decimal             @default(0.00) @db.Decimal(10, 2)
  bonusEarned           Decimal             @default(0.00) @db.Decimal(10, 2)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@unique([eventId, partnerId])
  @@index([eventId])
  @@index([partnerId])
  @@index([invitedByPromoterId])
  @@index([participationStatus])
}

model PromoterCommission {
  id               String           @id @default(cuid())
  promoterId       String
  promoter         Promoter         @relation(fields: [promoterId], references: [id])
  partnerId        String
  partner          Partner          @relation(fields: [partnerId], references: [id])
  commissionType   CommissionType
  referenceId      String?
  amount           Decimal          @db.Decimal(10, 2)
  percentage       Decimal          @db.Decimal(5, 4)
  baseAmount       Decimal          @db.Decimal(12, 2)
  periodStart      DateTime?
  periodEnd        DateTime?
  status           CommissionStatus @default(PENDING)
  paidAt           DateTime?
  paymentReference String?
  description      String?
  metadata         Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  @@index([promoterId])
  @@index([partnerId])
  @@index([commissionType])
  @@index([status])
  @@index([periodStart, periodEnd])
}

// Market Intelligence - Brech√≥ Discovery Models
model BrechoBusiness {
  id                String   @id @default(cuid())
  googlePlaceId     String   @unique
  name              String
  formattedAddress  String
  streetNumber      String?
  route             String?
  neighborhood      String?
  city              String
  state             String
  postalCode        String?
  latitude          Decimal  @db.Decimal(10, 8)
  longitude         Decimal  @db.Decimal(11, 8)
  phoneNumber       String?
  website           String?
  facebookUrl       String?
  instagramUrl      String?
  rating            Decimal? @db.Decimal(2, 1)
  reviewCount       Int?
  priceLevel        Int?     // 1-4 scale
  categories        String[]
  isOpenNow         Boolean?
  photos            String[] // URLs to business photos
  profileImage      String?
  discoveredAt      DateTime @default(now())
  lastUpdated       DateTime @updatedAt
  dataSource        String   @default("google-places")
  isActive          Boolean  @default(true)
  
  // Relations
  businessHours     BrechoBusinessHours[]
  searchResults     BrechoSearchResult[]
  
  @@index([googlePlaceId])
  @@index([city, state])
  @@index([latitude, longitude])
  @@index([rating])
  @@index([reviewCount])
  @@index([isActive])
  @@index([lastUpdated])
}

model BrechoBusinessHours {
  id            String        @id @default(cuid())
  businessId    String
  business      BrechoBusiness @relation(fields: [businessId], references: [id], onDelete: Cascade)
  dayOfWeek     Int           // 0 = Sunday, 6 = Saturday
  openTime      String?       // HH:MM format
  closeTime     String?       // HH:MM format
  isClosedAllDay Boolean      @default(false)
  
  @@unique([businessId, dayOfWeek])
  @@index([businessId])
}

model BrechoSearchResult {
  id                String         @id @default(cuid())
  searchId          String         // Unique identifier for search session
  businessId        String
  business          BrechoBusiness @relation(fields: [businessId], references: [id])
  promoterId        String
  promoter          Promoter       @relation(fields: [promoterId], references: [id])
  searchCenter      Json           // { lat, lng }
  searchRadius      Int            // meters
  filtersApplied    Json?          // Search filters used
  distanceFromCenter Decimal?      @db.Decimal(8, 2) // meters
  searchedAt        DateTime       @default(now())
  
  @@index([searchId])
  @@index([businessId])
  @@index([promoterId])
  @@index([searchedAt])
}

model BrechoMapView {
  id            String   @id @default(cuid())
  promoterId    String
  promoter      Promoter @relation(fields: [promoterId], references: [id])
  name          String
  description   String?
  centerLat     Decimal  @db.Decimal(10, 8)
  centerLng     Decimal  @db.Decimal(11, 8)
  zoom          Int
  mapType       String   @default("roadmap") // roadmap, satellite, hybrid, terrain
  filters       Json?    // Saved filter criteria
  visibleLayers String[] // Array of enabled layer names
  isPublic      Boolean  @default(false)
  shareToken    String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([promoterId])
  @@index([shareToken])
  @@index([isPublic])
}

model BrechoExportRequest {
  id               String   @id @default(cuid())
  promoterId       String
  promoter         Promoter @relation(fields: [promoterId], references: [id])
  format           String   // csv, excel
  searchCriteria   Json     // Search parameters used
  fields           String[] // Selected fields to export
  deliveryMethod   String   // download, email
  downloadUrl      String?
  recordCount      Int?
  fileSize         String?
  status           String   @default("processing") // processing, completed, failed
  expiresAt        DateTime?
  emailSentAt      DateTime?
  errorMessage     String?
  createdAt        DateTime @default(now())
  
  @@index([promoterId])
  @@index([status])
  @@index([createdAt])
}

// E-commerce Models
model Customer {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  phone             String?
  cpf               String?  @unique
  dateOfBirth       DateTime?
  preferredPayment  PaymentMethod?
  isActive          Boolean  @default(true)
  
  // Relations
  addresses         CustomerAddress[]
  orders            Order[]
  wishlist          Wishlist[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([email])
  @@index([cpf])
}

model CustomerAddress {
  id           String   @id @default(cuid())
  customerId   String
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  nickname     String?  // "Home", "Work", etc.
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isDefault    Boolean  @default(false)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([customerId])
}

model Order {
  id                  String        @id @default(cuid())
  orderNumber         String        @unique
  customerId          String
  customer            Customer      @relation(fields: [customerId], references: [id])
  partnerId           String
  partner             Partner       @relation(fields: [partnerId], references: [id])
  
  status              OrderStatus   @default(PENDING)
  paymentStatus       PaymentStatus @default(PENDING)
  paymentMethod       PaymentMethod?
  
  subtotal            Decimal       @db.Decimal(10, 2)
  shippingCost        Decimal       @db.Decimal(10, 2)
  discount            Decimal       @default(0.00) @db.Decimal(10, 2)
  total               Decimal       @db.Decimal(10, 2)
  
  shippingAddress     Json          // Snapshot of address at order time
  billingAddress      Json?         // If different from shipping
  
  notes               String?
  trackingCode        String?
  
  confirmedAt         DateTime?
  shippedAt           DateTime?
  deliveredAt         DateTime?
  cancelledAt         DateTime?
  refundedAt          DateTime?
  
  // Relations
  items               OrderItem[]
  payments            Payment[]
  
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  @@index([customerId])
  @@index([partnerId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  
  // Snapshot of product details at order time
  productSnapshot Json
  
  createdAt   DateTime @default(now())
  
  @@index([orderId])
  @@index([productId])
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  
  transactionId   String?       @unique
  gatewayResponse Json?
  
  paidAt          DateTime?
  failedAt        DateTime?
  refundedAt      DateTime?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([orderId])
  @@index([transactionId])
  @@index([status])
}

model Wishlist {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  
  @@unique([customerId, productId])
  @@index([customerId])
  @@index([productId])
}